---
alwaysApply: true
---

type: laravel
description: Laravel-specific patterns for IQRAPATH platform
globs: ["**/*.php", "**/*.blade.php"]

# Laravel Patterns - IQRAPATH Specific

## SERVICE LAYER ARCHITECTURE
This project uses a SERVICE LAYER pattern. Controllers are thin, Services handle business logic.

### Existing Services (USE THESE):
- `NotificationService` - All notification operations
- `FinancialService` - Wallet/payment operations  
- `SubscriptionService` - Subscription management
- `ZoomService` - Video session integration
- `PaymentService` - Payment processing
- `GuardianService` - Guardian/child management
- `MessageService` - Messaging system
- `SettingsService` - System settings
- `UnifiedWalletService` - Cross-wallet operations
- `StudentManagementService` - Student operations

### Controller Pattern (FOLLOW THIS EXACTLY):
```php
<?php
declare(strict_types=1);

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Services\NotificationService;
use Illuminate\Http\Request;
use Inertia\Inertia;
use Inertia\Response;

class ExampleController extends Controller
{
    public function __construct(
        private NotificationService $notificationService
    ) {}

    public function index(Request $request): Response
    {
        return Inertia::render('admin/example/index', [
            'data' => $this->notificationService->getSomething()
        ]);
    }
}
```

## DATABASE PATTERNS

### Multi-Role System (CRITICAL):
```php
// User roles: student, teacher, guardian, admin, super-admin
// Each has a profile table: student_profiles, teacher_profiles, etc.
// ALWAYS check user role before operations
```

### Existing Models (USE THESE):
Core Models:
- `User` - Base user with role
- `StudentProfile`, `TeacherProfile`, `GuardianProfile`, `AdminProfile`
- `Subject` - Islamic subjects taught

Booking System:
- `TeacherAvailability` - Teacher schedules
- `Booking` - Session bookings
- `TeachingSession` - Actual sessions
- `SessionMaterial`, `SessionProgress` - Session resources

Financial System:
- `StudentWallet`, `TeacherWallet`, `GuardianWallet`
- `Transaction`, `WalletTransaction`
- `PayoutRequest`, `TeacherEarning`

Subscription System:
- `SubscriptionPlan`, `Subscription`
- `SubscriptionTransaction`

Notification System:
- `Notification`, `NotificationRecipient`
- `NotificationTemplate`, `NotificationTrigger`

## ELOQUENT PATTERNS

### Relationships (FOLLOW THESE):
```php
// User has one profile based on role
public function studentProfile(): HasOne
{
    return $this->hasOne(StudentProfile::class);
}

// Always eager load to prevent N+1
$users = User::with('studentProfile')->get();

// Use scopes for role filtering
public function scopeStudents($query)
{
    return $query->where('role', 'student');
}
```

### Transaction Patterns:
```php
DB::transaction(function () use ($user, $amount) {
    $wallet = $user->wallet;
    $wallet->increment('balance', $amount);
    
    WalletTransaction::create([
        'wallet_id' => $wallet->id,
        'transaction_type' => 'credit',
        'amount' => $amount,
        'status' => 'completed'
    ]);
});
```

## VALIDATION PATTERNS

### FormRequest Pattern (ALWAYS USE):
```php
<?php
declare(strict_types=1);

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class StoreBookingRequest extends FormRequest
{
    public function authorize(): bool
    {
        return $this->user()->role === 'student';
    }

    public function rules(): array
    {
        return [
            'teacher_id' => 'required|exists:users,id',
            'subject_id' => 'required|exists:subjects,id',
            'booking_date' => 'required|date|after:today',
            'start_time' => 'required|date_format:H:i',
        ];
    }
}
```

## MIDDLEWARE USAGE

### Existing Middleware (USE THESE):
- `CheckRole` - Verify user role
- `CheckTeacherVerification` - Ensure teacher is verified
- `RedirectBasedOnRole` - Route to appropriate dashboard

### Usage Pattern:
```php
Route::middleware(['auth', 'role:admin'])->group(function () {
    Route::get('/admin/users', [UserController::class, 'index']);
});
```

## INERTIA RESPONSE PATTERNS

### Standard Page Response:
```php
return Inertia::render('admin/users/index', [
    'users' => User::with('studentProfile')->paginate(),
    'filters' => $request->only(['search', 'role']),
    'stats' => $this->userService->getStats()
]);
```

### API Response Pattern:
```php
public function store(StoreUserRequest $request): JsonResponse
{
    $user = $this->userService->create($request->validated());
    
    return response()->json([
        'success' => true,
        'data' => $user,
        'message' => 'User created successfully'
    ], 201);
}
```

## QUEUE JOB PATTERNS

### Existing Jobs (USE THESE):
- `SendNotificationJob` - Send notifications
- `SyncTeacherEarningJob` - Update teacher earnings
- `UpdateUrgentActionCounts` - Update admin counts
- `UpdateStudentStats` - Refresh student statistics

### Job Pattern:
```php
<?php
declare(strict_types=1);

namespace App\Jobs;

use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Queue\Queueable;

class ExampleJob implements ShouldQueue
{
    use Queueable;

    public function __construct(
        private User $user,
        private array $data
    ) {}

    public function handle(): void
    {
        // Job logic here
    }
}
```

## COMMAND PATTERNS

### Existing Commands (REFERENCE THESE):
- `SendSessionReminders` - Session reminder emails
- `ProcessScheduledResponses` - Support ticket responses  
- `StartReverbServer` - WebSocket server management

## POLICY PATTERNS

### Authorization (ALWAYS CHECK):
```php
// In controller
$this->authorize('update', $booking);

// In policy
public function update(User $user, Booking $booking): bool
{
    return $user->id === $booking->student_id 
        || $user->role === 'admin';
}
```

## EVENT/LISTENER PATTERNS

### Existing Events (USE THESE):
- `UserRegistered` - New user signup
- `PaymentProcessed` - Payment completion
- `SessionScheduled` - New session booked
- `SubscriptionExpiring` - Subscription ending

## TESTING PATTERNS

### Pest Test Structure:
```php
<?php

use App\Models\User;
use App\Services\NotificationService;

beforeEach(function () {
    $this->user = User::factory()->create(['role' => 'admin']);
});

it('can create notification', function () {
    $service = app(NotificationService::class);
    
    $notification = $service->createNotification([
        'title' => 'Test Notification',
        'body' => 'Test message',
        'type' => 'system'
    ]);
    
    expect($notification)->toBeInstanceOf(Notification::class);
});
```

## ROUTE ORGANIZATION

### Existing Route Files (FOLLOW THIS STRUCTURE):
- `routes/web.php` - Public pages
- `routes/auth.php` - Authentication
- `routes/dashboard.php` - User dashboards  
- `routes/admin.php` - Admin routes
- `routes/teacher.php` - Teacher-specific routes
- `routes/api.php` - API endpoints

## CRITICAL: DON'T CREATE NEW PATTERNS
This project has established patterns. Use them. Don't invent new ones.
