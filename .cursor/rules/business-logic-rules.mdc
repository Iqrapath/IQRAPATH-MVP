---
alwaysApply: true
---

type: business-logic
description: Business logic patterns and service usage rules
globs: ["**/*.php", "**/*.tsx", "**/*.ts"]

# Business Logic Rules - IQRAPATH Domain

## EXISTING BUSINESS DOMAINS (USE THESE)

### Core Domains Already Implemented:
1. **User Management** - Multi-role system (student, teacher, guardian, admin, super-admin)
2. **Booking System** - Teacher availability, session scheduling, approval workflow
3. **Financial System** - Multi-wallet, transactions, payouts, earnings
4. **Subscription Management** - Plans, payments, renewals, cancellations
5. **Notification System** - Multi-channel, templates, triggers, scheduling
6. **Educational Content** - Subjects, sessions, materials, progress tracking
7. **Verification System** - Teacher document and video verification
8. **Support System** - Tickets, disputes, feedback with attachments

### FORBIDDEN: Creating New Domains
- ❌ Don't create new business concepts that overlap with existing ones
- ❌ Don't build parallel systems for similar functionality
- ❌ Don't create "helper" services that duplicate existing services

## SERVICE LAYER RULES

### Existing Services (MANDATORY USAGE):

#### NotificationService - All notification operations
```php
$notificationService->createNotification([...]);
$notificationService->sendNotification($notification);
$notificationService->createFromTemplate('template_name', $data);
```

#### FinancialService - All money operations
```php
$financialService->addFunds($user, $amount);
$financialService->processPayment($user, $paymentData);
$financialService->calculateEarnings($teacher);
```

#### SubscriptionService - All subscription operations
```php
$subscriptionService->createSubscription($user, $plan);
$subscriptionService->processRenewal($subscription);
$subscriptionService->cancelSubscription($subscription);
```

#### ZoomService - Video session integration
```php
$zoomService->createMeeting($sessionData);
$zoomService->updateAttendance($meetingId, $participants);
```

### Service Pattern (FOLLOW EXACTLY):
```php
<?php
declare(strict_types=1);

namespace App\Services;

use App\Models\User;
use Illuminate\Support\Facades\DB;

class ExampleService
{
    public function __construct(
        private NotificationService $notificationService,
        private FinancialService $financialService
    ) {}

    public function performBusinessOperation(User $user, array $data): mixed
    {
        return DB::transaction(function () use ($user, $data) {
            // 1. Validate business rules
            $this->validateBusinessRules($user, $data);
            
            // 2. Perform core operation
            $result = $this->executeCoreLogic($user, $data);
            
            // 3. Handle side effects
            $this->handleSideEffects($user, $result);
            
            return $result;
        });
    }

    private function validateBusinessRules(User $user, array $data): void
    {
        // Business validation logic
    }

    private function executeCoreLogic(User $user, array $data): mixed
    {
        // Core business logic
    }

    private function handleSideEffects(User $user, mixed $result): void
    {
        // Notifications, logging, etc.
    }
}
```

## BUSINESS RULES ENFORCEMENT

### User Role Business Rules:
```php
// Student business rules
if ($user->role === 'student') {
    // Can book sessions, subscribe to plans, make payments
    // Cannot teach, cannot access admin functions
}

// Teacher business rules  
if ($user->role === 'teacher') {
    // Must be verified before teaching
    // Can set availability, earn money, receive payouts
    // Cannot access admin functions
}

// Guardian business rules
if ($user->role === 'guardian') {
    // Can manage multiple children
    // Can pay for children's subscriptions
    // Can message teachers about children
}

// Admin business rules
if ($user->role === 'admin') {
    // Can manage users, process payouts, create content
    // Cannot modify system settings (super-admin only)
}
```

### Financial Business Rules:
```php
// Wallet operations MUST go through FinancialService
// NEVER manipulate wallet balances directly
// ALWAYS create transaction records
// ALWAYS validate sufficient funds before debits

// Teacher earnings MUST be calculated by FinancialService
// NEVER create earnings records manually
// ALWAYS validate session completion before payment
```

### Booking Business Rules:
```php
// Bookings MUST check teacher availability
// Sessions MUST be created after booking approval
// Zoom meetings MUST be created for virtual sessions
// Attendance MUST be tracked for earnings calculation
```

## DATA VALIDATION RULES

### Use Existing Validation Patterns:
```php
// FormRequest for all user input
class StoreBookingRequest extends FormRequest
{
    public function authorize(): bool
    {
        return $this->user()->role === 'student';
    }

    public function rules(): array
    {
        return [
            'teacher_id' => [
                'required',
                'exists:users,id',
                new TeacherIsVerified(),
                new TeacherIsAvailable($this->booking_date, $this->start_time)
            ],
            'subject_id' => 'required|exists:subjects,id',
            'booking_date' => 'required|date|after:today',
            'start_time' => 'required|date_format:H:i',
        ];
    }
}
```

## EVENT/LISTENER PATTERNS

### Existing Events (USE THESE FOR SIDE EFFECTS):
```php
// After user registration
event(new UserRegistered($user));

// After payment processing  
event(new PaymentProcessed($user, $paymentData));

// After session scheduling
event(new SessionScheduled($user, $sessionData));

// After subscription changes
event(new SubscriptionExpiring($user, $subscriptionData));
```

### FORBIDDEN Event Patterns:
- ❌ Don't create events for simple CRUD operations
- ❌ Don't use events for synchronous business logic
- ❌ Don't create events that duplicate existing ones

## MODEL BUSINESS LOGIC

### Keep Models Focused:
```php
// Models should contain:
// ✅ Relationships
// ✅ Scopes
// ✅ Accessors/Mutators
// ✅ Simple business methods

// Models should NOT contain:
// ❌ Complex business logic (use Services)
// ❌ External API calls (use Services)
// ❌ Cross-domain operations (use Services)

class Booking extends Model
{
    // ✅ Good - simple business method
    public function isUpcoming(): bool
    {
        return $this->booking_date >= today() && $this->status === 'approved';
    }
    
    // ❌ Bad - complex logic belongs in service
    public function processPaymentAndCreateSession(): void
    {
        // This belongs in BookingService
    }
}
```

## AUTHORIZATION PATTERNS

### Use Existing Policy Patterns:
```php
// In controller
$this->authorize('update', $booking);

// In policy
public function update(User $user, Booking $booking): bool
{
    return match($user->role) {
        'student' => $user->id === $booking->student_id,
        'teacher' => $user->id === $booking->teacher_id,
        'admin', 'super-admin' => true,
        default => false
    };
}
```

## INTEGRATION RULES

### External Service Integration:
```php
// Zoom API calls MUST go through ZoomService
// Payment gateway calls MUST go through PaymentService
// Email sending MUST go through NotificationService
// NEVER make direct API calls from controllers or models

// Pattern for external service calls:
try {
    $result = $this->zoomService->createMeeting($data);
} catch (ExternalServiceException $e) {
    Log::error('Zoom API failed', ['error' => $e->getMessage()]);
    throw new ServiceUnavailableException('Video service temporarily unavailable');
}
```

## CRITICAL BUSINESS CONSTRAINTS

### Financial Constraints:
- Student wallets CANNOT go negative
- Teacher payouts CANNOT exceed available earnings
- Subscription payments MUST be processed before activation
- Refunds MUST create proper transaction records

### Booking Constraints:
- Teachers CANNOT be double-booked
- Students CANNOT book unverified teachers
- Sessions CANNOT be scheduled in the past
- Zoom meetings MUST be created for virtual sessions

### User Constraints:
- Users CANNOT change their own roles
- Only verified teachers can teach
- Guardians can only manage their own children
- Admins cannot perform super-admin actions

## DEBUGGING BUSINESS LOGIC

### When Business Logic Fails:
1. Check user role and permissions first
2. Verify business rules in the appropriate Service
3. Check database constraints and relationships
4. Review event listeners for side effects
5. Check queue jobs for async operations

### Logging Business Operations:
```php
Log::info('Booking created', [
    'user_id' => $user->id,
    'booking_id' => $booking->id,
    'teacher_id' => $booking->teacher_id,
    'subject_id' => $booking->subject_id
]);
```

Remember: This platform handles real money, education, and user data. Business rules exist for good reasons. Don't bypass them.
